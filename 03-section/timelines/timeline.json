[{"source":"Test Process","id":0,"command":{"name_":"getAvailableLogTypes","parameters_":{}},"start":1476210768122,"end":1476210768123},{"source":"Test Process","id":1,"command":{"name_":"get","parameters_":{"url":"data:text/html,<html></html>"}},"start":1476210768191,"end":1476210768233},{"source":"Test Process","id":2,"command":{"name_":"executeScript","parameters_":{"script":"window.name = \"NG_DEFER_BOOTSTRAP!NG_ENABLE_DEBUG_INFO!\" + window.name;window.location.replace(\"https://angularjs.org/\");","args":[]}},"start":1476210768235,"end":1476210771512},{"source":"Test Process","id":3,"command":{"name_":"executeScript","parameters_":{"script":"return window.location.href;","args":[]}},"start":1476210771514,"end":1476210771521},{"source":"Test Process","id":4,"command":{"name_":"executeAsyncScript","parameters_":{"script":"try { return (function (attempts, asyncCallback) {\n  var callback = function(args) {\n    setTimeout(function() {\n      asyncCallback(args);\n    }, 0);\n  };\n  var check = function(n) {\n    try {\n      if (window.getAllAngularTestabilities) {\n        callback({ver: 2});\n      } else if (window.angular && window.angular.resumeBootstrap) {\n        callback({ver: 1});\n      } else if (n < 1) {\n        if (window.angular) {\n          callback({message: 'angular never provided resumeBootstrap'});\n        } else {\n          callback({message: 'retries looking for angular exceeded'});\n        }\n      } else {\n        window.setTimeout(function() {check(n - 1);}, 1000);\n      }\n    } catch (e) {\n      callback({message: e});\n    }\n  };\n  check(attempts);\n}).apply(this, arguments); }\ncatch(e) { throw (e instanceof Error) ? e : new Error(e); }","args":[10]}},"start":1476210771524,"end":1476210772208},{"source":"Test Process","id":5,"command":{"name_":"executeScript","parameters_":{"script":"return (function (trackOutstandingTimeouts) {\n    var ngMod = angular.module('protractorBaseModule_', []).\n        config(['$compileProvider', function($compileProvider) {\n          if ($compileProvider.debugInfoEnabled) {\n            $compileProvider.debugInfoEnabled(true);\n          }\n        }]);\n    if (trackOutstandingTimeouts) {\n      ngMod.config(['$provide', function($provide) {\n          $provide.decorator('$timeout', ['$delegate', function($delegate) {\n            var $timeout = $delegate;\n\n            var taskId = 0;\n            if (!window.NG_PENDING_TIMEOUTS) {\n              window.NG_PENDING_TIMEOUTS = {};\n            }\n              \n            var extendedTimeout = function() {\n              var args = Array.prototype.slice.call(arguments);\n              if (typeof(args[0]) !== 'function') {\n                return $timeout.apply(null, args);\n              }\n\n              taskId++;\n              var fn = args[0];\n              window.NG_PENDING_TIMEOUTS[taskId] = fn.toString();\n              var wrappedFn = (function(taskId_) {\n                return function() {\n                  delete window.NG_PENDING_TIMEOUTS[taskId_]; \n                  return fn.apply(null, arguments);\n                };\n              })(taskId);\n              args[0] = wrappedFn;\n              \n              var promise = $timeout.apply(null, args);\n              promise.ptorTaskId_ = taskId;\n              return promise;\n            };\n\n            extendedTimeout.cancel = function() {\n              var taskId_ = arguments[0] && arguments[0].ptorTaskId_;\n              if (taskId_) {\n                delete window.NG_PENDING_TIMEOUTS[taskId_]; \n              }\n              return $timeout.cancel.apply($timeout, arguments);\n            };\n             \n            return extendedTimeout;\n          }]);\n        }]);\n    }   \n  }).apply(null, arguments);","args":[true]}},"start":1476210772210,"end":1476210772214},{"source":"Test Process","id":6,"command":{"name_":"executeScript","parameters_":{"script":"angular.resumeBootstrap(arguments[0]);","args":[["protractorBaseModule_"]]}},"start":1476210772215,"end":1476210772701},{"source":"Test Process","id":7,"command":{"name_":"executeAsyncScript","parameters_":{"script":"try { return (function (rootSelector, callback) {\n  var el = document.querySelector(rootSelector);\n\n  try {\n    if (window.getAngularTestability) {\n      window.getAngularTestability(el).whenStable(callback);\n      return;\n    }\n    if (!window.angular) {\n      throw new Error('window.angular is undefined.  This could be either ' +\n          'because this is a non-angular page or because your test involves ' +\n          'client-side navigation, which can interfere with Protractor\\'s ' +\n          'bootstrapping.  See http://git.io/v4gXM for details');\n    }\n    if (angular.getTestability) {\n      angular.getTestability(el).whenStable(callback);\n    } else {\n      if (!angular.element(el).injector()) {\n        throw new Error('root element (' + rootSelector + ') has no injector.' +\n           ' this may mean it is not inside ng-app.');\n      }\n      angular.element(el).injector().get('$browser').\n          notifyWhenNoOutstandingRequests(callback);\n    }\n  } catch (err) {\n    callback(err.message);\n  }\n}).apply(this, arguments); }\ncatch(e) { throw (e instanceof Error) ? e : new Error(e); }","args":["body"]}},"start":1476210772703,"end":1476210772745},{"source":"Test Process","id":8,"command":{"name_":"getTitle","parameters_":{}},"start":1476210772748,"end":1476210772752},{"source":"Test Process","id":9,"command":{"name_":"quit","parameters_":{}},"start":1476210772761,"end":1476210772813}]